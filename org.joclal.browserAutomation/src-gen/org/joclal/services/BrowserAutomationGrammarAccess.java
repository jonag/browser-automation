/*
* generated by Xtext
*/
package org.joclal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BrowserAutomationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BrowserAutomationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BrowserAutomation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubroutinesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubroutinesSubroutineParserRuleCall_0_0 = (RuleCall)cSubroutinesAssignment_0.eContents().get(0);
		private final Keyword cBrowserKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBrowserAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBrowserBrowserEnumRuleCall_2_0 = (RuleCall)cBrowserAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFirstGoToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFirstGoToGotoParserRuleCall_4_0 = (RuleCall)cFirstGoToAssignment_4.eContents().get(0);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		
		//BrowserAutomation:
		//	subroutines+=Subroutine* "browser" browser=Browser ";" firstGoTo=Goto actions+=Action*;
		public ParserRule getRule() { return rule; }

		//subroutines+=Subroutine* "browser" browser=Browser ";" firstGoTo=Goto actions+=Action*
		public Group getGroup() { return cGroup; }

		//subroutines+=Subroutine*
		public Assignment getSubroutinesAssignment_0() { return cSubroutinesAssignment_0; }

		//Subroutine
		public RuleCall getSubroutinesSubroutineParserRuleCall_0_0() { return cSubroutinesSubroutineParserRuleCall_0_0; }

		//"browser"
		public Keyword getBrowserKeyword_1() { return cBrowserKeyword_1; }

		//browser=Browser
		public Assignment getBrowserAssignment_2() { return cBrowserAssignment_2; }

		//Browser
		public RuleCall getBrowserBrowserEnumRuleCall_2_0() { return cBrowserBrowserEnumRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//firstGoTo=Goto
		public Assignment getFirstGoToAssignment_4() { return cFirstGoToAssignment_4; }

		//Goto
		public RuleCall getFirstGoToGotoParserRuleCall_4_0() { return cFirstGoToGotoParserRuleCall_4_0; }

		//actions+=Action*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }

		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGotoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClickOnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFillParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUncheckParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLetParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDoWhileParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIfThenParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSubroutineCallParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Action:
		//	Goto | ClickOn | Fill | Check | Uncheck | Let | DoWhile | IfThen | SubroutineCall;
		public ParserRule getRule() { return rule; }

		//Goto | ClickOn | Fill | Check | Uncheck | Let | DoWhile | IfThen | SubroutineCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//Goto
		public RuleCall getGotoParserRuleCall_0() { return cGotoParserRuleCall_0; }

		//ClickOn
		public RuleCall getClickOnParserRuleCall_1() { return cClickOnParserRuleCall_1; }

		//Fill
		public RuleCall getFillParserRuleCall_2() { return cFillParserRuleCall_2; }

		//Check
		public RuleCall getCheckParserRuleCall_3() { return cCheckParserRuleCall_3; }

		//Uncheck
		public RuleCall getUncheckParserRuleCall_4() { return cUncheckParserRuleCall_4; }

		//Let
		public RuleCall getLetParserRuleCall_5() { return cLetParserRuleCall_5; }

		//DoWhile
		public RuleCall getDoWhileParserRuleCall_6() { return cDoWhileParserRuleCall_6; }

		//IfThen
		public RuleCall getIfThenParserRuleCall_7() { return cIfThenParserRuleCall_7; }

		//SubroutineCall
		public RuleCall getSubroutineCallParserRuleCall_8() { return cSubroutineCallParserRuleCall_8; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlValueParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Goto:
		//	"GoTo" url=Value ";";
		public ParserRule getRule() { return rule; }

		//"GoTo" url=Value ";"
		public Group getGroup() { return cGroup; }

		//"GoTo"
		public Keyword getGoToKeyword_0() { return cGoToKeyword_0; }

		//url=Value
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//Value
		public RuleCall getUrlValueParserRuleCall_1_0() { return cUrlValueParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ClickOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClickOn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClickOn:
		//	"Click" selector=Selector ";";
		public ParserRule getRule() { return rule; }

		//"Click" selector=Selector ";"
		public Group getGroup() { return cGroup; }

		//"Click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }

		//selector=Selector
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }

		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0() { return cSelectorSelectorParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Selector:
		//	"select(" id=STRING ")";
		public ParserRule getRule() { return rule; }

		//"select(" id=STRING ")"
		public Group getGroup() { return cGroup; }

		//"select("
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//id=STRING
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_1_0() { return cIdSTRINGTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldSelectorParserRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Fill:
		//	"Fill" field=Selector "with" value=Value ";";
		public ParserRule getRule() { return rule; }

		//"Fill" field=Selector "with" value=Value ";"
		public Group getGroup() { return cGroup; }

		//"Fill"
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }

		//field=Selector
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//Selector
		public RuleCall getFieldSelectorParserRuleCall_1_0() { return cFieldSelectorParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheckboxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckboxSelectorParserRuleCall_1_0 = (RuleCall)cCheckboxAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Check:
		//	"Check" checkbox=Selector ";";
		public ParserRule getRule() { return rule; }

		//"Check" checkbox=Selector ";"
		public Group getGroup() { return cGroup; }

		//"Check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//checkbox=Selector
		public Assignment getCheckboxAssignment_1() { return cCheckboxAssignment_1; }

		//Selector
		public RuleCall getCheckboxSelectorParserRuleCall_1_0() { return cCheckboxSelectorParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UncheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Uncheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUncheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheckboxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckboxSelectorParserRuleCall_1_0 = (RuleCall)cCheckboxAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Uncheck:
		//	"Uncheck" checkbox=Selector ";";
		public ParserRule getRule() { return rule; }

		//"Uncheck" checkbox=Selector ";"
		public Group getGroup() { return cGroup; }

		//"Uncheck"
		public Keyword getUncheckKeyword_0() { return cUncheckKeyword_0; }

		//checkbox=Selector
		public Assignment getCheckboxAssignment_1() { return cCheckboxAssignment_1; }

		//Selector
		public RuleCall getCheckboxSelectorParserRuleCall_1_0() { return cCheckboxSelectorParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class LetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Let");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdVariableIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLetValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Let:
		//	"Let" id=VariableId "=" value=LetValue ";";
		public ParserRule getRule() { return rule; }

		//"Let" id=VariableId "=" value=LetValue ";"
		public Group getGroup() { return cGroup; }

		//"Let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//id=VariableId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//VariableId
		public RuleCall getIdVariableIdParserRuleCall_1_0() { return cIdVariableIdParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=LetValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//LetValue
		public RuleCall getValueLetValueParserRuleCall_3_0() { return cValueLetValueParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class LetValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSelectorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_0 = (RuleCall)cSelectorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LetValue:
		//	selector=Selector | value=Value;
		public ParserRule getRule() { return rule; }

		//selector=Selector | value=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//selector=Selector
		public Assignment getSelectorAssignment_0() { return cSelectorAssignment_0; }

		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_0_0() { return cSelectorSelectorParserRuleCall_0_0; }

		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVariableVariableIdCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableIdIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableIdCrossReference_1_0.eContents().get(1);
		
		//Value:
		//	string=STRING | variable=[VariableId];
		public ParserRule getRule() { return rule; }

		//string=STRING | variable=[VariableId]
		public Alternatives getAlternatives() { return cAlternatives; }

		//string=STRING
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_0() { return cStringSTRINGTerminalRuleCall_0_0; }

		//variable=[VariableId]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//[VariableId]
		public CrossReference getVariableVariableIdCrossReference_1_0() { return cVariableVariableIdCrossReference_1_0; }

		//ID
		public RuleCall getVariableVariableIdIDTerminalRuleCall_1_0_1() { return cVariableVariableIdIDTerminalRuleCall_1_0_1; }
	}

	public class DoWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionBooleanExpParserRuleCall_6_0 = (RuleCall)cConditionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DoWhile:
		//	"Do" "{" actions+=Action* "}" "While" "(" condition=BooleanExp ")";
		public ParserRule getRule() { return rule; }

		//"Do" "{" actions+=Action* "}" "While" "(" condition=BooleanExp ")"
		public Group getGroup() { return cGroup; }

		//"Do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//actions+=Action*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"While"
		public Keyword getWhileKeyword_4() { return cWhileKeyword_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//condition=BooleanExp
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }

		//BooleanExp
		public RuleCall getConditionBooleanExpParserRuleCall_6_0() { return cConditionBooleanExpParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftMemberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftMemberValueParserRuleCall_0_0 = (RuleCall)cLeftMemberAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightMemberValueParserRuleCall_2_0 = (RuleCall)cRightMemberAssignment_2.eContents().get(0);
		
		//BooleanExp:
		//	leftMember=Value operator=Operator rightMember=Value;
		public ParserRule getRule() { return rule; }

		//leftMember=Value operator=Operator rightMember=Value
		public Group getGroup() { return cGroup; }

		//leftMember=Value
		public Assignment getLeftMemberAssignment_0() { return cLeftMemberAssignment_0; }

		//Value
		public RuleCall getLeftMemberValueParserRuleCall_0_0() { return cLeftMemberValueParserRuleCall_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//rightMember=Value
		public Assignment getRightMemberAssignment_2() { return cRightMemberAssignment_2; }

		//Value
		public RuleCall getRightMemberValueParserRuleCall_2_0() { return cRightMemberValueParserRuleCall_2_0; }
	}

	public class IfThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionBooleanExpParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenActionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenActionsActionParserRuleCall_6_0 = (RuleCall)cThenActionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cElseActionsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cElseActionsActionParserRuleCall_8_2_0 = (RuleCall)cElseActionsAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//IfThen:
		//	"If" "(" condition=BooleanExp ")" "Then" "{" thenActions+=Action* "}" ("Else" "{" elseActions+=Action* "}")?;
		public ParserRule getRule() { return rule; }

		//"If" "(" condition=BooleanExp ")" "Then" "{" thenActions+=Action* "}" ("Else" "{" elseActions+=Action* "}")?
		public Group getGroup() { return cGroup; }

		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=BooleanExp
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//BooleanExp
		public RuleCall getConditionBooleanExpParserRuleCall_2_0() { return cConditionBooleanExpParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"Then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//thenActions+=Action*
		public Assignment getThenActionsAssignment_6() { return cThenActionsAssignment_6; }

		//Action
		public RuleCall getThenActionsActionParserRuleCall_6_0() { return cThenActionsActionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//("Else" "{" elseActions+=Action* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"Else"
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//elseActions+=Action*
		public Assignment getElseActionsAssignment_8_2() { return cElseActionsAssignment_8_2; }

		//Action
		public RuleCall getElseActionsActionParserRuleCall_8_2_0() { return cElseActionsActionParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}

	public class SubroutineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subroutine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsVariableIdParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsVariableIdParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsActionParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Subroutine:
		//	"Def" name=ID ("(" params+=VariableId ("," params+=VariableId)? ")")? "{" actions+=Action* "}";
		public ParserRule getRule() { return rule; }

		//"Def" name=ID ("(" params+=VariableId ("," params+=VariableId)? ")")? "{" actions+=Action* "}"
		public Group getGroup() { return cGroup; }

		//"Def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" params+=VariableId ("," params+=VariableId)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=VariableId
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//VariableId
		public RuleCall getParamsVariableIdParserRuleCall_2_1_0() { return cParamsVariableIdParserRuleCall_2_1_0; }

		//("," params+=VariableId)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=VariableId
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//VariableId
		public RuleCall getParamsVariableIdParserRuleCall_2_2_1_0() { return cParamsVariableIdParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//actions+=Action*
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }

		//Action
		public RuleCall getActionsActionParserRuleCall_4_0() { return cActionsActionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SubroutineCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubroutineCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubroutineAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSubroutineSubroutineCrossReference_1_0 = (CrossReference)cSubroutineAssignment_1.eContents().get(0);
		private final RuleCall cSubroutineSubroutineIDTerminalRuleCall_1_0_1 = (RuleCall)cSubroutineSubroutineCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SubroutineCall:
		//	"Call" subroutine=[Subroutine] ";";
		public ParserRule getRule() { return rule; }

		//"Call" subroutine=[Subroutine] ";"
		public Group getGroup() { return cGroup; }

		//"Call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//subroutine=[Subroutine]
		public Assignment getSubroutineAssignment_1() { return cSubroutineAssignment_1; }

		//[Subroutine]
		public CrossReference getSubroutineSubroutineCrossReference_1_0() { return cSubroutineSubroutineCrossReference_1_0; }

		//ID
		public RuleCall getSubroutineSubroutineIDTerminalRuleCall_1_0_1() { return cSubroutineSubroutineIDTerminalRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class VariableIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableId:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	
	
	public class BrowserElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Browser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChromeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChromeChromeKeyword_0_0 = (Keyword)cChromeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSafariEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSafariSafariKeyword_1_0 = (Keyword)cSafariEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOperaEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOperaOperaKeyword_2_0 = (Keyword)cOperaEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFirefoxEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFirefoxFirefoxKeyword_3_0 = (Keyword)cFirefoxEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIeInternetExplorerKeyword_4_0 = (Keyword)cIeEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Browser:
		//	chrome="Chrome" | safari="Safari" | opera="Opera" | firefox="Firefox" | ie="Internet Explorer";
		public EnumRule getRule() { return rule; }

		//chrome="Chrome" | safari="Safari" | opera="Opera" | firefox="Firefox" | ie="Internet Explorer"
		public Alternatives getAlternatives() { return cAlternatives; }

		//chrome="Chrome"
		public EnumLiteralDeclaration getChromeEnumLiteralDeclaration_0() { return cChromeEnumLiteralDeclaration_0; }

		//"Chrome"
		public Keyword getChromeChromeKeyword_0_0() { return cChromeChromeKeyword_0_0; }

		//safari="Safari"
		public EnumLiteralDeclaration getSafariEnumLiteralDeclaration_1() { return cSafariEnumLiteralDeclaration_1; }

		//"Safari"
		public Keyword getSafariSafariKeyword_1_0() { return cSafariSafariKeyword_1_0; }

		//opera="Opera"
		public EnumLiteralDeclaration getOperaEnumLiteralDeclaration_2() { return cOperaEnumLiteralDeclaration_2; }

		//"Opera"
		public Keyword getOperaOperaKeyword_2_0() { return cOperaOperaKeyword_2_0; }

		//firefox="Firefox"
		public EnumLiteralDeclaration getFirefoxEnumLiteralDeclaration_3() { return cFirefoxEnumLiteralDeclaration_3; }

		//"Firefox"
		public Keyword getFirefoxFirefoxKeyword_3_0() { return cFirefoxFirefoxKeyword_3_0; }

		//ie="Internet Explorer"
		public EnumLiteralDeclaration getIeEnumLiteralDeclaration_4() { return cIeEnumLiteralDeclaration_4; }

		//"Internet Explorer"
		public Keyword getIeInternetExplorerKeyword_4_0() { return cIeInternetExplorerKeyword_4_0; }
	}

	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualsExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNotEqualsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGtGreaterThanSignKeyword_2_0 = (Keyword)cGtEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLtLessThanSignKeyword_3_0 = (Keyword)cLtEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGteEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGteGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGteEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLteEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLteLessThanSignEqualsSignKeyword_5_0 = (Keyword)cLteEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Operator:
		//	equals="==" | notEquals="!=" | gt=">" | lt="<" | gte=">=" | lte="<=";
		public EnumRule getRule() { return rule; }

		//equals="==" | notEquals="!=" | gt=">" | lt="<" | gte=">=" | lte="<="
		public Alternatives getAlternatives() { return cAlternatives; }

		//equals="=="
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualsEqualsSignEqualsSignKeyword_0_0() { return cEqualsEqualsSignEqualsSignKeyword_0_0; }

		//notEquals="!="
		public EnumLiteralDeclaration getNotEqualsEnumLiteralDeclaration_1() { return cNotEqualsEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNotEqualsExclamationMarkEqualsSignKeyword_1_0() { return cNotEqualsExclamationMarkEqualsSignKeyword_1_0; }

		//gt=">"
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_2() { return cGtEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGtGreaterThanSignKeyword_2_0() { return cGtGreaterThanSignKeyword_2_0; }

		//lt="<"
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_3() { return cLtEnumLiteralDeclaration_3; }

		//"<"
		public Keyword getLtLessThanSignKeyword_3_0() { return cLtLessThanSignKeyword_3_0; }

		//gte=">="
		public EnumLiteralDeclaration getGteEnumLiteralDeclaration_4() { return cGteEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGteGreaterThanSignEqualsSignKeyword_4_0() { return cGteGreaterThanSignEqualsSignKeyword_4_0; }

		//lte="<="
		public EnumLiteralDeclaration getLteEnumLiteralDeclaration_5() { return cLteEnumLiteralDeclaration_5; }

		//"<="
		public Keyword getLteLessThanSignEqualsSignKeyword_5_0() { return cLteLessThanSignEqualsSignKeyword_5_0; }
	}
	
	private final BrowserAutomationElements pBrowserAutomation;
	private final BrowserElements unknownRuleBrowser;
	private final ActionElements pAction;
	private final GotoElements pGoto;
	private final ClickOnElements pClickOn;
	private final SelectorElements pSelector;
	private final FillElements pFill;
	private final CheckElements pCheck;
	private final UncheckElements pUncheck;
	private final LetElements pLet;
	private final LetValueElements pLetValue;
	private final ValueElements pValue;
	private final DoWhileElements pDoWhile;
	private final BooleanExpElements pBooleanExp;
	private final OperatorElements unknownRuleOperator;
	private final IfThenElements pIfThen;
	private final SubroutineElements pSubroutine;
	private final SubroutineCallElements pSubroutineCall;
	private final VariableIdElements pVariableId;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BrowserAutomationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBrowserAutomation = new BrowserAutomationElements();
		this.unknownRuleBrowser = new BrowserElements();
		this.pAction = new ActionElements();
		this.pGoto = new GotoElements();
		this.pClickOn = new ClickOnElements();
		this.pSelector = new SelectorElements();
		this.pFill = new FillElements();
		this.pCheck = new CheckElements();
		this.pUncheck = new UncheckElements();
		this.pLet = new LetElements();
		this.pLetValue = new LetValueElements();
		this.pValue = new ValueElements();
		this.pDoWhile = new DoWhileElements();
		this.pBooleanExp = new BooleanExpElements();
		this.unknownRuleOperator = new OperatorElements();
		this.pIfThen = new IfThenElements();
		this.pSubroutine = new SubroutineElements();
		this.pSubroutineCall = new SubroutineCallElements();
		this.pVariableId = new VariableIdElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.joclal.BrowserAutomation".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BrowserAutomation:
	//	subroutines+=Subroutine* "browser" browser=Browser ";" firstGoTo=Goto actions+=Action*;
	public BrowserAutomationElements getBrowserAutomationAccess() {
		return pBrowserAutomation;
	}
	
	public ParserRule getBrowserAutomationRule() {
		return getBrowserAutomationAccess().getRule();
	}

	//enum Browser:
	//	chrome="Chrome" | safari="Safari" | opera="Opera" | firefox="Firefox" | ie="Internet Explorer";
	public BrowserElements getBrowserAccess() {
		return unknownRuleBrowser;
	}
	
	public EnumRule getBrowserRule() {
		return getBrowserAccess().getRule();
	}

	//Action:
	//	Goto | ClickOn | Fill | Check | Uncheck | Let | DoWhile | IfThen | SubroutineCall;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Goto:
	//	"GoTo" url=Value ";";
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//ClickOn:
	//	"Click" selector=Selector ";";
	public ClickOnElements getClickOnAccess() {
		return pClickOn;
	}
	
	public ParserRule getClickOnRule() {
		return getClickOnAccess().getRule();
	}

	//Selector:
	//	"select(" id=STRING ")";
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//Fill:
	//	"Fill" field=Selector "with" value=Value ";";
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}

	//Check:
	//	"Check" checkbox=Selector ";";
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//Uncheck:
	//	"Uncheck" checkbox=Selector ";";
	public UncheckElements getUncheckAccess() {
		return pUncheck;
	}
	
	public ParserRule getUncheckRule() {
		return getUncheckAccess().getRule();
	}

	//Let:
	//	"Let" id=VariableId "=" value=LetValue ";";
	public LetElements getLetAccess() {
		return pLet;
	}
	
	public ParserRule getLetRule() {
		return getLetAccess().getRule();
	}

	//LetValue:
	//	selector=Selector | value=Value;
	public LetValueElements getLetValueAccess() {
		return pLetValue;
	}
	
	public ParserRule getLetValueRule() {
		return getLetValueAccess().getRule();
	}

	//Value:
	//	string=STRING | variable=[VariableId];
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//DoWhile:
	//	"Do" "{" actions+=Action* "}" "While" "(" condition=BooleanExp ")";
	public DoWhileElements getDoWhileAccess() {
		return pDoWhile;
	}
	
	public ParserRule getDoWhileRule() {
		return getDoWhileAccess().getRule();
	}

	//BooleanExp:
	//	leftMember=Value operator=Operator rightMember=Value;
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}

	//enum Operator:
	//	equals="==" | notEquals="!=" | gt=">" | lt="<" | gte=">=" | lte="<=";
	public OperatorElements getOperatorAccess() {
		return unknownRuleOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//IfThen:
	//	"If" "(" condition=BooleanExp ")" "Then" "{" thenActions+=Action* "}" ("Else" "{" elseActions+=Action* "}")?;
	public IfThenElements getIfThenAccess() {
		return pIfThen;
	}
	
	public ParserRule getIfThenRule() {
		return getIfThenAccess().getRule();
	}

	//Subroutine:
	//	"Def" name=ID ("(" params+=VariableId ("," params+=VariableId)? ")")? "{" actions+=Action* "}";
	public SubroutineElements getSubroutineAccess() {
		return pSubroutine;
	}
	
	public ParserRule getSubroutineRule() {
		return getSubroutineAccess().getRule();
	}

	//SubroutineCall:
	//	"Call" subroutine=[Subroutine] ";";
	public SubroutineCallElements getSubroutineCallAccess() {
		return pSubroutineCall;
	}
	
	public ParserRule getSubroutineCallRule() {
		return getSubroutineCallAccess().getRule();
	}

	//VariableId:
	//	name=STRING;
	public VariableIdElements getVariableIdAccess() {
		return pVariableId;
	}
	
	public ParserRule getVariableIdRule() {
		return getVariableIdAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
