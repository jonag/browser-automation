/*
* generated by Xtext
*/
grammar InternalBrowserAutomation;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.joclal.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.joclal.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.joclal.services.BrowserAutomationGrammarAccess;

}

@parser::members {
 
 	private BrowserAutomationGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BrowserAutomationGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoto
entryRuleGoto 
:
{ before(grammarAccess.getGotoRule()); }
	 ruleGoto
{ after(grammarAccess.getGotoRule()); } 
	 EOF 
;

// Rule Goto
ruleGoto
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGotoAccess().getGroup()); }
(rule__Goto__Group__0)
{ after(grammarAccess.getGotoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClickOn
entryRuleClickOn 
:
{ before(grammarAccess.getClickOnRule()); }
	 ruleClickOn
{ after(grammarAccess.getClickOnRule()); } 
	 EOF 
;

// Rule ClickOn
ruleClickOn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClickOnAccess().getGroup()); }
(rule__ClickOn__Group__0)
{ after(grammarAccess.getClickOnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelector
entryRuleSelector 
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectorAccess().getGroup()); }
(rule__Selector__Group__0)
{ after(grammarAccess.getSelectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFill
entryRuleFill 
:
{ before(grammarAccess.getFillRule()); }
	 ruleFill
{ after(grammarAccess.getFillRule()); } 
	 EOF 
;

// Rule Fill
ruleFill
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFillAccess().getGroup()); }
(rule__Fill__Group__0)
{ after(grammarAccess.getFillAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheck
entryRuleCheck 
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckAccess().getGroup()); }
(rule__Check__Group__0)
{ after(grammarAccess.getCheckAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUncheck
entryRuleUncheck 
:
{ before(grammarAccess.getUncheckRule()); }
	 ruleUncheck
{ after(grammarAccess.getUncheckRule()); } 
	 EOF 
;

// Rule Uncheck
ruleUncheck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUncheckAccess().getGroup()); }
(rule__Uncheck__Group__0)
{ after(grammarAccess.getUncheckAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLet
entryRuleLet 
:
{ before(grammarAccess.getLetRule()); }
	 ruleLet
{ after(grammarAccess.getLetRule()); } 
	 EOF 
;

// Rule Let
ruleLet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetAccess().getGroup()); }
(rule__Let__Group__0)
{ after(grammarAccess.getLetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLetValue
entryRuleLetValue 
:
{ before(grammarAccess.getLetValueRule()); }
	 ruleLetValue
{ after(grammarAccess.getLetValueRule()); } 
	 EOF 
;

// Rule LetValue
ruleLetValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetValueAccess().getAlternatives()); }
(rule__LetValue__Alternatives)
{ after(grammarAccess.getLetValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleBooleanExp
entryRuleBooleanExp 
:
{ before(grammarAccess.getBooleanExpRule()); }
	 ruleBooleanExp
{ after(grammarAccess.getBooleanExpRule()); } 
	 EOF 
;

// Rule BooleanExp
ruleBooleanExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpAccess().getGroup()); }
(rule__BooleanExp__Group__0)
{ after(grammarAccess.getBooleanExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule Browser
ruleBrowser
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrowserAccess().getAlternatives()); }
(rule__Browser__Alternatives)
{ after(grammarAccess.getBrowserAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getGotoParserRuleCall_0()); }
	ruleGoto
{ after(grammarAccess.getActionAccess().getGotoParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getClickOnParserRuleCall_1()); }
	ruleClickOn
{ after(grammarAccess.getActionAccess().getClickOnParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getActionAccess().getFillParserRuleCall_2()); }
	ruleFill
{ after(grammarAccess.getActionAccess().getFillParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getActionAccess().getCheckParserRuleCall_3()); }
	ruleCheck
{ after(grammarAccess.getActionAccess().getCheckParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getActionAccess().getUncheckParserRuleCall_4()); }
	ruleUncheck
{ after(grammarAccess.getActionAccess().getUncheckParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getActionAccess().getLetParserRuleCall_5()); }
	ruleLet
{ after(grammarAccess.getActionAccess().getLetParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetValueAccess().getSelectorAssignment_0()); }
(rule__LetValue__SelectorAssignment_0)
{ after(grammarAccess.getLetValueAccess().getSelectorAssignment_0()); }
)

    |(
{ before(grammarAccess.getLetValueAccess().getValueAssignment_1()); }
(rule__LetValue__ValueAssignment_1)
{ after(grammarAccess.getLetValueAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringAssignment_0()); }
(rule__Value__StringAssignment_0)
{ after(grammarAccess.getValueAccess().getStringAssignment_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getIntAssignment_1()); }
(rule__Value__IntAssignment_1)
{ after(grammarAccess.getValueAccess().getIntAssignment_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getLetAssignment_2()); }
(rule__Value__LetAssignment_2)
{ after(grammarAccess.getValueAccess().getLetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Browser__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBrowserAccess().getChromeEnumLiteralDeclaration_0()); }
(	'Chrome' 
)
{ after(grammarAccess.getBrowserAccess().getChromeEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBrowserAccess().getSafariEnumLiteralDeclaration_1()); }
(	'Safari' 
)
{ after(grammarAccess.getBrowserAccess().getSafariEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBrowserAccess().getOperaEnumLiteralDeclaration_2()); }
(	'Opera' 
)
{ after(grammarAccess.getBrowserAccess().getOperaEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBrowserAccess().getFirefoxEnumLiteralDeclaration_3()); }
(	'Firefox' 
)
{ after(grammarAccess.getBrowserAccess().getFirefoxEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getBrowserAccess().getIeEnumLiteralDeclaration_4()); }
(	'Internet Explorer' 
)
{ after(grammarAccess.getBrowserAccess().getIeEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getEqualsEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getOperatorAccess().getEqualsEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGtEnumLiteralDeclaration_1()); }
(	'>' 
)
{ after(grammarAccess.getOperatorAccess().getGtEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLtEnumLiteralDeclaration_2()); }
(	'<' 
)
{ after(grammarAccess.getOperatorAccess().getLtEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGteEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorAccess().getGteEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLteEnumLiteralDeclaration_4()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorAccess().getLteEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getBrowserKeyword_0()); }

	'browser' 

{ after(grammarAccess.getModelAccess().getBrowserKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getBrowserAssignment_1()); }
(rule__Model__BrowserAssignment_1)
{ after(grammarAccess.getModelAccess().getBrowserAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getModelAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFirstGoToAssignment_3()); }
(rule__Model__FirstGoToAssignment_3)
{ after(grammarAccess.getModelAccess().getFirstGoToAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionsAssignment_4()); }
(rule__Model__ActionsAssignment_4)*
{ after(grammarAccess.getModelAccess().getActionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Goto__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__0__Impl
	rule__Goto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getGoToKeyword_0()); }

	'GoTo' 

{ after(grammarAccess.getGotoAccess().getGoToKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__1__Impl
	rule__Goto__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getUrlAssignment_1()); }
(rule__Goto__UrlAssignment_1)
{ after(grammarAccess.getGotoAccess().getUrlAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Goto__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getGotoAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ClickOn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClickOn__Group__0__Impl
	rule__ClickOn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickOn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickOnAccess().getClickKeyword_0()); }

	'Click' 

{ after(grammarAccess.getClickOnAccess().getClickKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClickOn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClickOn__Group__1__Impl
	rule__ClickOn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickOn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickOnAccess().getSelectorAssignment_1()); }
(rule__ClickOn__SelectorAssignment_1)
{ after(grammarAccess.getClickOnAccess().getSelectorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClickOn__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClickOn__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickOn__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickOnAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getClickOnAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Selector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selector__Group__0__Impl
	rule__Selector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorAccess().getSelectKeyword_0()); }

	'select(' 

{ after(grammarAccess.getSelectorAccess().getSelectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selector__Group__1__Impl
	rule__Selector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorAccess().getIdAssignment_1()); }
(rule__Selector__IdAssignment_1)
{ after(grammarAccess.getSelectorAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selector__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getSelectorAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Fill__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__0__Impl
	rule__Fill__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFillKeyword_0()); }

	'Fill' 

{ after(grammarAccess.getFillAccess().getFillKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__1__Impl
	rule__Fill__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFieldAssignment_1()); }
(rule__Fill__FieldAssignment_1)
{ after(grammarAccess.getFillAccess().getFieldAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__2__Impl
	rule__Fill__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getWithKeyword_2()); }

	'with' 

{ after(grammarAccess.getFillAccess().getWithKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__3__Impl
	rule__Fill__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getValueAssignment_3()); }
(rule__Fill__ValueAssignment_3)
{ after(grammarAccess.getFillAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getFillAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Check__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckKeyword_0()); }

	'Check' 

{ after(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__1__Impl
	rule__Check__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckboxAssignment_1()); }
(rule__Check__CheckboxAssignment_1)
{ after(grammarAccess.getCheckAccess().getCheckboxAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getCheckAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Uncheck__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Uncheck__Group__0__Impl
	rule__Uncheck__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUncheckAccess().getUncheckKeyword_0()); }

	'Uncheck' 

{ after(grammarAccess.getUncheckAccess().getUncheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Uncheck__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Uncheck__Group__1__Impl
	rule__Uncheck__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUncheckAccess().getCheckboxAssignment_1()); }
(rule__Uncheck__CheckboxAssignment_1)
{ after(grammarAccess.getUncheckAccess().getCheckboxAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Uncheck__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Uncheck__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUncheckAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getUncheckAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Let__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Let__Group__0__Impl
	rule__Let__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetAccess().getLetKeyword_0()); }

	'Let' 

{ after(grammarAccess.getLetAccess().getLetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Let__Group__1__Impl
	rule__Let__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetAccess().getNameAssignment_1()); }
(rule__Let__NameAssignment_1)
{ after(grammarAccess.getLetAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Let__Group__2__Impl
	rule__Let__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getLetAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Let__Group__3__Impl
	rule__Let__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetAccess().getValueAssignment_3()); }
(rule__Let__ValueAssignment_3)
{ after(grammarAccess.getLetAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Let__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Let__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Let__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getLetAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__BooleanExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExp__Group__0__Impl
	rule__BooleanExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getLeftMemberAssignment_0()); }
(rule__BooleanExp__LeftMemberAssignment_0)
{ after(grammarAccess.getBooleanExpAccess().getLeftMemberAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExp__Group__1__Impl
	rule__BooleanExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getOperatorAssignment_1()); }
(rule__BooleanExp__OperatorAssignment_1)
{ after(grammarAccess.getBooleanExpAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExp__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getRightMemberAssignment_2()); }
(rule__BooleanExp__RightMemberAssignment_2)
{ after(grammarAccess.getBooleanExpAccess().getRightMemberAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__BrowserAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getBrowserBrowserEnumRuleCall_1_0()); }
	ruleBrowser{ after(grammarAccess.getModelAccess().getBrowserBrowserEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FirstGoToAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFirstGoToGotoParserRuleCall_3_0()); }
	ruleGoto{ after(grammarAccess.getModelAccess().getFirstGoToGotoParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ActionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionsActionParserRuleCall_4_0()); }
	ruleAction{ after(grammarAccess.getModelAccess().getActionsActionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__UrlAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGotoAccess().getUrlValueParserRuleCall_1_0()); }
	ruleValue{ after(grammarAccess.getGotoAccess().getUrlValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClickOn__SelectorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickOnAccess().getSelectorSelectorParserRuleCall_1_0()); }
	ruleSelector{ after(grammarAccess.getClickOnAccess().getSelectorSelectorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorAccess().getIdSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getSelectorAccess().getIdSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__FieldAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFieldSelectorParserRuleCall_1_0()); }
	ruleSelector{ after(grammarAccess.getFillAccess().getFieldSelectorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getValueValueParserRuleCall_3_0()); }
	ruleValue{ after(grammarAccess.getFillAccess().getValueValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__CheckboxAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckboxSelectorParserRuleCall_1_0()); }
	ruleSelector{ after(grammarAccess.getCheckAccess().getCheckboxSelectorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Uncheck__CheckboxAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUncheckAccess().getCheckboxSelectorParserRuleCall_1_0()); }
	ruleSelector{ after(grammarAccess.getUncheckAccess().getCheckboxSelectorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Let__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLetAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Let__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetAccess().getValueLetValueParserRuleCall_3_0()); }
	ruleLetValue{ after(grammarAccess.getLetAccess().getValueLetValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetValue__SelectorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetValueAccess().getSelectorSelectorParserRuleCall_0_0()); }
	ruleSelector{ after(grammarAccess.getLetValueAccess().getSelectorSelectorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetValue__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetValueAccess().getValueValueParserRuleCall_1_0()); }
	ruleValue{ after(grammarAccess.getLetValueAccess().getValueValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__StringAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getValueAccess().getStringSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__IntAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getValueAccess().getIntINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__LetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getLetLetCrossReference_2_0()); }
(
{ before(grammarAccess.getValueAccess().getLetLetIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getValueAccess().getLetLetIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getValueAccess().getLetLetCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BooleanExp__LeftMemberAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getLeftMemberValueParserRuleCall_0_0()); }
	ruleValue{ after(grammarAccess.getBooleanExpAccess().getLeftMemberValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExp__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getOperatorOperatorEnumRuleCall_1_0()); }
	ruleOperator{ after(grammarAccess.getBooleanExpAccess().getOperatorOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExp__RightMemberAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getRightMemberValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getBooleanExpAccess().getRightMemberValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


