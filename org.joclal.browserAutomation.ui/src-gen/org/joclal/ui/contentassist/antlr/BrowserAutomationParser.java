/*
* generated by Xtext
*/
package org.joclal.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.joclal.services.BrowserAutomationGrammarAccess;

public class BrowserAutomationParser extends AbstractContentAssistParser {
	
	@Inject
	private BrowserAutomationGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.joclal.ui.contentassist.antlr.internal.InternalBrowserAutomationParser createParser() {
		org.joclal.ui.contentassist.antlr.internal.InternalBrowserAutomationParser result = new org.joclal.ui.contentassist.antlr.internal.InternalBrowserAutomationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getLetValueAccess().getAlternatives(), "rule__LetValue__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getBrowserAccess().getAlternatives(), "rule__Browser__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
					put(grammarAccess.getClickOnAccess().getGroup(), "rule__ClickOn__Group__0");
					put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
					put(grammarAccess.getFillAccess().getGroup(), "rule__Fill__Group__0");
					put(grammarAccess.getCheckAccess().getGroup(), "rule__Check__Group__0");
					put(grammarAccess.getUncheckAccess().getGroup(), "rule__Uncheck__Group__0");
					put(grammarAccess.getLetAccess().getGroup(), "rule__Let__Group__0");
					put(grammarAccess.getDoWhileAccess().getGroup(), "rule__DoWhile__Group__0");
					put(grammarAccess.getBooleanExpAccess().getGroup(), "rule__BooleanExp__Group__0");
					put(grammarAccess.getIfThenAccess().getGroup(), "rule__IfThen__Group__0");
					put(grammarAccess.getIfThenAccess().getGroup_5(), "rule__IfThen__Group_5__0");
					put(grammarAccess.getModelAccess().getBrowserAssignment_1(), "rule__Model__BrowserAssignment_1");
					put(grammarAccess.getModelAccess().getFirstGoToAssignment_3(), "rule__Model__FirstGoToAssignment_3");
					put(grammarAccess.getModelAccess().getActionsAssignment_4(), "rule__Model__ActionsAssignment_4");
					put(grammarAccess.getGotoAccess().getUrlAssignment_1(), "rule__Goto__UrlAssignment_1");
					put(grammarAccess.getClickOnAccess().getSelectorAssignment_1(), "rule__ClickOn__SelectorAssignment_1");
					put(grammarAccess.getSelectorAccess().getIdAssignment_1(), "rule__Selector__IdAssignment_1");
					put(grammarAccess.getFillAccess().getFieldAssignment_1(), "rule__Fill__FieldAssignment_1");
					put(grammarAccess.getFillAccess().getValueAssignment_3(), "rule__Fill__ValueAssignment_3");
					put(grammarAccess.getCheckAccess().getCheckboxAssignment_1(), "rule__Check__CheckboxAssignment_1");
					put(grammarAccess.getUncheckAccess().getCheckboxAssignment_1(), "rule__Uncheck__CheckboxAssignment_1");
					put(grammarAccess.getLetAccess().getNameAssignment_1(), "rule__Let__NameAssignment_1");
					put(grammarAccess.getLetAccess().getValueAssignment_3(), "rule__Let__ValueAssignment_3");
					put(grammarAccess.getLetValueAccess().getSelectorAssignment_0(), "rule__LetValue__SelectorAssignment_0");
					put(grammarAccess.getLetValueAccess().getValueAssignment_1(), "rule__LetValue__ValueAssignment_1");
					put(grammarAccess.getValueAccess().getStringAssignment_0(), "rule__Value__StringAssignment_0");
					put(grammarAccess.getValueAccess().getIntAssignment_1(), "rule__Value__IntAssignment_1");
					put(grammarAccess.getValueAccess().getLetAssignment_2(), "rule__Value__LetAssignment_2");
					put(grammarAccess.getDoWhileAccess().getActionsAssignment_1(), "rule__DoWhile__ActionsAssignment_1");
					put(grammarAccess.getDoWhileAccess().getConditionAssignment_3(), "rule__DoWhile__ConditionAssignment_3");
					put(grammarAccess.getBooleanExpAccess().getLeftMemberAssignment_0(), "rule__BooleanExp__LeftMemberAssignment_0");
					put(grammarAccess.getBooleanExpAccess().getOperatorAssignment_1(), "rule__BooleanExp__OperatorAssignment_1");
					put(grammarAccess.getBooleanExpAccess().getRightMemberAssignment_2(), "rule__BooleanExp__RightMemberAssignment_2");
					put(grammarAccess.getIfThenAccess().getConditionAssignment_1(), "rule__IfThen__ConditionAssignment_1");
					put(grammarAccess.getIfThenAccess().getThenActionsAssignment_3(), "rule__IfThen__ThenActionsAssignment_3");
					put(grammarAccess.getIfThenAccess().getElseActionsAssignment_5_1(), "rule__IfThen__ElseActionsAssignment_5_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.joclal.ui.contentassist.antlr.internal.InternalBrowserAutomationParser typedParser = (org.joclal.ui.contentassist.antlr.internal.InternalBrowserAutomationParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BrowserAutomationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BrowserAutomationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
