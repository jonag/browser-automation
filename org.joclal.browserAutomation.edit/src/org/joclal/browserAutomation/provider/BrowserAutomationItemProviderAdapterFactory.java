/**
 */
package org.joclal.browserAutomation.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.joclal.browserAutomation.util.BrowserAutomationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BrowserAutomationItemProviderAdapterFactory extends BrowserAutomationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BrowserAutomationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Goto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GotoItemProvider gotoItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Goto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGotoAdapter() {
		if (gotoItemProvider == null) {
			gotoItemProvider = new GotoItemProvider(this);
		}

		return gotoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.ClickOn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClickOnItemProvider clickOnItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.ClickOn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClickOnAdapter() {
		if (clickOnItemProvider == null) {
			clickOnItemProvider = new ClickOnItemProvider(this);
		}

		return clickOnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Selector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectorItemProvider selectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Selector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectorAdapter() {
		if (selectorItemProvider == null) {
			selectorItemProvider = new SelectorItemProvider(this);
		}

		return selectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.DomID} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomIDItemProvider domIDItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.DomID}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomIDAdapter() {
		if (domIDItemProvider == null) {
			domIDItemProvider = new DomIDItemProvider(this);
		}

		return domIDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.SubroutineParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubroutineParamItemProvider subroutineParamItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.SubroutineParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubroutineParamAdapter() {
		if (subroutineParamItemProvider == null) {
			subroutineParamItemProvider = new SubroutineParamItemProvider(this);
		}

		return subroutineParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Fill} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FillItemProvider fillItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Fill}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFillAdapter() {
		if (fillItemProvider == null) {
			fillItemProvider = new FillItemProvider(this);
		}

		return fillItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Check} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckItemProvider checkItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Check}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckAdapter() {
		if (checkItemProvider == null) {
			checkItemProvider = new CheckItemProvider(this);
		}

		return checkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Uncheck} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UncheckItemProvider uncheckItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Uncheck}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUncheckAdapter() {
		if (uncheckItemProvider == null) {
			uncheckItemProvider = new UncheckItemProvider(this);
		}

		return uncheckItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Let} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LetItemProvider letItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Let}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLetAdapter() {
		if (letItemProvider == null) {
			letItemProvider = new LetItemProvider(this);
		}

		return letItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.LetValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LetValueItemProvider letValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.LetValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLetValueAdapter() {
		if (letValueItemProvider == null) {
			letValueItemProvider = new LetValueItemProvider(this);
		}

		return letValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.DoWhile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoWhileItemProvider doWhileItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.DoWhile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoWhileAdapter() {
		if (doWhileItemProvider == null) {
			doWhileItemProvider = new DoWhileItemProvider(this);
		}

		return doWhileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.BooleanExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanExpItemProvider booleanExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.BooleanExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanExpAdapter() {
		if (booleanExpItemProvider == null) {
			booleanExpItemProvider = new BooleanExpItemProvider(this);
		}

		return booleanExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.IfThen} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfThenItemProvider ifThenItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.IfThen}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfThenAdapter() {
		if (ifThenItemProvider == null) {
			ifThenItemProvider = new IfThenItemProvider(this);
		}

		return ifThenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.Subroutine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubroutineItemProvider subroutineItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.Subroutine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubroutineAdapter() {
		if (subroutineItemProvider == null) {
			subroutineItemProvider = new SubroutineItemProvider(this);
		}

		return subroutineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.SubroutineCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubroutineCallItemProvider subroutineCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.SubroutineCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubroutineCallAdapter() {
		if (subroutineCallItemProvider == null) {
			subroutineCallItemProvider = new SubroutineCallItemProvider(this);
		}

		return subroutineCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.joclal.browserAutomation.VariableId} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableIdItemProvider variableIdItemProvider;

	/**
	 * This creates an adapter for a {@link org.joclal.browserAutomation.VariableId}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableIdAdapter() {
		if (variableIdItemProvider == null) {
			variableIdItemProvider = new VariableIdItemProvider(this);
		}

		return variableIdItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (gotoItemProvider != null) gotoItemProvider.dispose();
		if (clickOnItemProvider != null) clickOnItemProvider.dispose();
		if (selectorItemProvider != null) selectorItemProvider.dispose();
		if (domIDItemProvider != null) domIDItemProvider.dispose();
		if (subroutineParamItemProvider != null) subroutineParamItemProvider.dispose();
		if (fillItemProvider != null) fillItemProvider.dispose();
		if (checkItemProvider != null) checkItemProvider.dispose();
		if (uncheckItemProvider != null) uncheckItemProvider.dispose();
		if (letItemProvider != null) letItemProvider.dispose();
		if (letValueItemProvider != null) letValueItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (doWhileItemProvider != null) doWhileItemProvider.dispose();
		if (booleanExpItemProvider != null) booleanExpItemProvider.dispose();
		if (ifThenItemProvider != null) ifThenItemProvider.dispose();
		if (subroutineItemProvider != null) subroutineItemProvider.dispose();
		if (subroutineCallItemProvider != null) subroutineCallItemProvider.dispose();
		if (variableIdItemProvider != null) variableIdItemProvider.dispose();
	}

}
